version: '3.2'

networks:
  app:
    driver: bridge

services:
  web:
    build: "./app/webapp"
    container_name: "webapp"
    volumes:
      - ./app/webapp:/usr/app/webapp/
      - node_modules_webapp:/usr/app/webapp/node_modules
    ports:
      - "8080:8080"
    stdin_open: true
    tty: true
    networks:
      - app
    restart: always

  facilities:
    build: "./app/facilities"
    container_name: "facilities"
    command: npm start
    volumes:
      - ./app/facilities:/usr/app/facilities/
      - node_modules_fac:/usr/app/facilities/node_modules
    ports:
      - "13773:13773"
    stdin_open: true
    tty: true
    environment:
      WAIT_HOSTS: mongo-fac:27017
    restart: always
    links:
      - mongo-fac
    depends_on:
      - mongo-fac
    networks:
      - app

  facility-monitor:
    build: "./app/facility-monitor"
    command: npm start
    volumes:
      - ./app/facility-monitor:/usr/app/facility-monitor/
      - node_modules_facility-monitor:/usr/app/facility-monitor/node_modules
    ports:
      - "14141:14141"
    stdin_open: true
    tty: true
    depends_on:
      - facilities
    environment:
      WAIT_HOSTS: facilities:13773
    networks:
      - app

  message-monitor:
    build: "./app/message-monitor"
    command: npm start
    volumes:
      - ./app/message-monitor:/usr/app/message-monitor/
      - node_modules_message-monitor:/usr/app/message-monitor/node_modules
    ports:
      - "15151:15151"
    stdin_open: true
    tty: true
    environment:
      WAIT_HOSTS: messages:14773
    depends_on:
      - messages
    networks:
      - app
    restart: always

  mongo-fac:
    container_name: mongo-fac
    image: mongo:latest
    volumes:
      - ./data/db-mongo-fac:/data/db
    ports:
      - "13774:27017"
    networks:
      - app
    restart: always

  mongo-express-fac:
    container_name: mongo-express-fac
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo-fac
      ME_CONFIG_MONGODB_PORT: 27017
    links:
      - mongo-fac
    depends_on:
      - mongo-fac
    networks:
      - app
    restart: always

  messages:
    build: "./app/messages"
    container_name: "messages"
    command: npm start
    volumes:
      - ./app/messages:/usr/app/messages/
      - node_modules_mes:/usr/app/messages/node_modules
    ports:
      - "14773:14773"
    stdin_open: true
    tty: true
    links:
      - mongo-mes
    depends_on:
      - mongo-mes
    environment:
      WAIT_HOSTS: mongo-mes:27017
    networks:
      - app
    restart: always

  mongo-mes:
    container_name: mongo-mes
    image: mongo:latest
    volumes:
      - ./data/db-mongo-mes:/data/db
    ports:
      - "14774:27017"
    networks:
      - app
    restart: always

  mongo-express-mes:
    container_name: mongo-express-mes
    image: mongo-express
    ports:
      - "8082:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo-mes
      ME_CONFIG_MONGODB_PORT: 27017
    links:
      - mongo-mes
    depends_on:
      - mongo-mes
    networks:
      - app
    restart: always

  users:
    build: "./app/users"
    container_name: "users"
    command: npm start
    volumes:
      - ./app/users:/usr/app/users/
      - node_modules_usr:/usr/app/users/node_modules
    ports:
      - "16773:16773"
    stdin_open: true
    tty: true
    links:
      - mongo-usr
    depends_on:
      - mongo-usr
    environment:
      WAIT_HOSTS: mongo-usr:27017
    networks:
      - app
    restart: always

  mongo-usr:
    container_name: mongo-usr
    image: mongo:latest
    volumes:
      - ./data/db-mongo-usr:/data/db
    ports:
      - "16774:27017"
    networks:
      - app
    restart: always

  mongo-express-usr:
    container_name: mongo-express-usr
    image: mongo-express
    ports:
      - "8083:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo-usr
      ME_CONFIG_MONGODB_PORT: 27017
    links:
      - mongo-usr
    depends_on:
      - mongo-usr
    networks:
      - app
    restart: always

  rabbit1:
    image: rabbitmq:3-management
    container_name: 'rabbit1'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - app
    restart: always

  rabbit-status:
    image: rabbitmq:3-management
    container_name: 'rabbit-status'
    ports:
      - 5673:5672
      - 15673:15672
    volumes:
      - ~/.docker-conf/rabbitmq-status/data/:/var/lib/rabbitmq-status/
      - ~/.docker-conf/rabbitmq-status/log/:/var/log/rabbitmq-status
    networks:
      - app
    restart: always

volumes:
  node_modules_fac:
  node_modules_mes:
  node_modules_webapp:
  node_modules_usr:
  node_modules_facility-monitor:
  node_modules_message-monitor:
  rabbit1:
  rabbit-status: